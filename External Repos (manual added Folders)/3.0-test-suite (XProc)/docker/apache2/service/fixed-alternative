#!/usr/bin/perl -- # -*- Perl -*-

use strict;
use English;
use CGI::Carp qw(fatalsToBrowser);

# To satisfy Apache, always read the input
if ($ENV{'REQUEST_METHOD'} eq 'POST') {
    read(STDIN, $_, $ENV{'CONTENT_LENGTH'});
}

my $boundary = "=-=-=-=-=";

print "Content-type: multipart/alternative; boundary=\"$boundary\"\r\n\r\n";

print "--$boundary\r\n";

print "Content-type: text/html\r\n\r\n";
open (F, "/usr/local/apache2/htdocs/docs/helloworld.html");
while (<F>) {
    print $_;
}
close (F);

print "\r\n--$boundary\r\n";

print "Content-type: application/xhtml+xml\r\n\r\n";
open (F, "/usr/local/apache2/htdocs/docs/helloworld.html");
while (<F>) {
    print $_;
}
close (F);

print "\r\n--$boundary\r\n";

my $file = "/usr/local/apache2/htdocs/docs/helloworld.png";
print "Content-type: image/png\r\n";
print "Content-length: ", -s $file, "\r\n";
print "\r\n";
open (F, "/usr/local/apache2/htdocs/docs/helloworld.png");
binmode F;
while (read(F, $_, 4096)) {
    print $_;
}
close (F);

print "\r\n--$boundary\r\n";

print "Content-type: text/plain\r\n\r\n";
print "Hello world!\r\n";
print "This is a hello world document.\r\n";

print "\r\n--${boundary}--\r\n";
