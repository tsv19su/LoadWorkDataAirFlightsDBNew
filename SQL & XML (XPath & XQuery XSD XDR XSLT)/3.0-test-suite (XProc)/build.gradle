// Note: when this script is run by Travis on a modern OS, the current
// directory is not available. If you use getAbsolutePath(), what you
// get back is something like this: /home/travis/build/[secure]/
// and that's not useful. Consequently, all of the paths in this project
// have been made relative.
//
// Note also: relative paths are tricky because options to XSL stylesheets
// and pipelines will be resolved *relative to the stylesheet or pipeline*.
//
// You have been warned.

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://maven.restlet.talend.com" }
  }

  dependencies {
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-gradle', version: '1.5.2'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash', version: '1.2.5-100'
    classpath group: 'org.xmlresolver', name: 'xmlresolver', version: '1.0.6'
  }
}

plugins {
  id "de.undercouch.download" version "4.1.1"
}

repositories {
  mavenLocal()
  mavenCentral()
}

configurations {
  tools {
    description = "Run tools"
    transitive = true
  }
}

dependencies {
  tools (
    fileTree(dir: 'tools/lib').include("*.jar")
  )
}

defaultTasks 'website'

apply plugin: 'com.xmlcalabash.task'
apply plugin: 'groovy'

import de.undercouch.gradle.tasks.download.Download
import com.xmlcalabash.XMLCalabashTask
import CopyFiles
import Docker

ext {
  c_xproctest = "xproctests"
}

// ======================================================================

def getenv(String name) {
  if (System.getenv(name) == null) {
    return ""
  } else {
    return System.getenv(name)
  }
}

tasks.register("dockerup") {
  doLast {
    Docker.assertRunning(c_xproctest)
  }
}

tasks.register("dockerdown") {
  doLast {
    Docker.assertNotRunning(c_xproctest)
  }
}

tasks.register("start") {
  dependsOn "dockerdown"

  doFirst {
    Docker.assertDockerAvailable()
    Docker.assertDockerComposeAvailable()
  }

  doLast {
    exec {
      workingDir "docker"
      commandLine Docker.dockerCompose(), "up", "-d"
    }
    exec {
      commandLine Docker.docker(), "ps", "-a", "--format={{.ID}} {{.Names}} {{.Status}}"
    }
  }
}

tasks.register("stop") {
  doFirst {
    Docker.assertDockerComposeAvailable()
  }    

  doLast {
    exec {
      workingDir "docker"
      commandLine Docker.dockerCompose(), "down"
    }
  }
}

// ======================================================================
// schemas

tasks.register("schemas") {
  dependsOn "test_suite_rng", "test_suite_sch", "junit_xsd"
}

tasks.register("test_suite_rng", JavaExec) {
  inputs.file "src/main/schema/test-suite.rnc"
  outputs.file "build/test-suite.rng"

  classpath = configurations.tools
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["src/main/schema/test-suite.rnc", "build/test-suite.rng"]
}

tasks.register("test_suite_sch", CopyFiles) {
  output(file("build"))
  sources(fileTree("src/main/schema"), "*.sch")
}

tasks.register("junit_xsd", CopyFiles) {
  output(file("build"))
  sources(fileTree("src/main/schema"), "*.xsd")
}

// ======================================================================

tasks.register("test_index_setup", XMLCalabashTask) {
  dependsOn "process_all_tests","git_log_shorter","get_specs"

  inputs.file "reports/xml-calabash.xml"
  inputs.file "build/git-log-shorter.xml"
  inputs.file "tools/xsl/test-index.xsl"
  inputs.file "tools/xsl/functions.xsl"
  inputs.file "tools/xsl/merge-git-log.xsl"

  output("result", "build/indexing.xml")
  extensionValues true
  ignoreInvalidXmlBase true
  option("spec-dir", "build/specs")
  pipeline "tools/xpl/test-index-setup.xpl"
}

tasks.register("test_indexes") {
  dependsOn "test_index_setup"
}

["alphabetical", "date", "element", "errors", "expected", "implementation"].each { itype ->
  String name = "idx_test_${itype}_index"
  tasks.register(name, XMLCalabashTask) {
    dependsOn "test_index_setup"
    input("source", "build/indexing.xml")
    output("result", "build/html/" + itype + ".html")
    param("index-type", itype)
    extensionValues true
    option("stylesheet", "../xsl/test-index.xsl")
    pipeline "tools/xpl/run-xslt-html.xpl"
  }
  test_indexes.dependsOn name
}

tasks.register("process_all_tests", XMLCalabashTask) {
  dependsOn "schemas", "get_specs"

  inputs.files files("test-suite/tests")
    .asFileTree
    .matching { include "**/*.xml" }
    .files

  outputs.files files("test-suite/tests")
    .asFileTree
    .matching { include "**/*.xml" }
    .files
    .collect { "build/html/tests/${it.name.replace(".xml", ".html")}" }

  pipeline "tools/xpl/process-all.xpl"
  doFirst {
    mkdir("build/tests")
  }
}

// ======================================================================

tasks.register("git_log_summary", Exec) {
  outputs.file "build/git-log-summary.xml"
  commandLine 'tools/bin/git-log-summary', '-o', 'build/git-log-summary.xml'
  doFirst {
    mkdir("build")
  }
}

tasks.register("git_log_shorter", XMLCalabashTask) {
  dependsOn "git_log_summary"

  inputs.file "tools/xsl/shorter-log.xsl"
  inputs.file "build/git-log-summary.xml"
  outputs.file "build/git-log-shorter.xml"
  input("source", "build/git-log-summary.xml")
  output("result", "build/git-log-shorter.xml")
  pipeline "tools/xpl/run-xslt.xpl"
  option("stylesheet", "../xsl/shorter-log.xsl")
}

// ======================================================================

tasks.register("website") {
  dependsOn "process_all_tests", "test_indexes", "copy_tests", "make_index"
}

tasks.register("copy_tests", Copy) {
  from "test-suite/"
  into "build/html/test-suite/"
}

tasks.register("copy_rsrcs", Copy) {
  from "src/main/resources"
  exclude "index.html"
  into "build/html/"
}

tasks.register("make_index", XMLCalabashTask) {
  dependsOn "copy_rsrcs","get_specs"

  inputs.file "tools/xsl/travis-patch.xsl"
  inputs.file "tools/xpl/run-xslt-html.xpl"
  input("source", "src/main/resources/index.html")
  output("result", "build/html/index.html")
  pipeline "tools/xpl/run-xslt-html.xpl"
  option("stylesheet", "../xsl/travis-patch.xsl")
  param("travis", getenv('TRAVIS'))
  param("travis-build", getenv('TRAVIS_BUILD_NUMBER'))
  param("travis-commit", getenv('TRAVIS_COMMIT'))
  doFirst {
    mkdir("build/html")
  }
}

tasks.register("get_specs", XMLCalabashTask) {
  output("result", "build/specs.xml")
  pipeline "tools/xpl/specs.xpl"
  option("spec-dir", "../../build/specs")
}

["xproc", "steps", "file", "json", "os", "paged-media",
 "run", "text", "validation"].each { name ->
  File target = new File("build/specs/" + name + ".html")
  tasks.register("download_${name}", Download) {
    src "https://spec.xproc.org/master/head/" + name + "/"
    dest target
    doFirst {
      mkdir("build/specs")
    }
    onlyIf { !target.exists() }
  }
  get_specs.dependsOn "download_${name}"
}

tasks.register("list_test", XMLCalabashTask) {
  dependsOn "get_specs"

  inputs.file "tools/xsl/list-test.xsl"
  option("spec-dir", "../../build/specs")
  pipeline "tools/xpl/list-test.xpl"
  output("result", "build/out.html")
  extensionValues true
}

// ======================================================================
// Clean up

clean {
  doFirst {
    delete("build")
  }
}
