buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://maven.restlet.talend.com" }
  }

  // Get rid of that [expletive deleted] warning about xml-apis 2.0.2/1.0.b2
  configurations.all {
    resolutionStrategy {
      force 'xml-apis:xml-apis:1.4.01'
    }
  }

  dependencies {
    classpath fileTree(dir: 'lib/', include: ['*.jar'])
    classpath group: 'org.docbook', name: 'docbook-xslt2', version: docbookXsltVersion
    classpath group: 'org.docbook', name: 'docbook-schemas', version: '5.1-1'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-print', version: '1.1.5'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-gradle', version: '1.4.0'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash', version: '1.3.2-99'
    classpath group: 'org.xmlresolver', name: 'xmlresolver', version: '3.0.2'
  }
}

plugins {
  id "de.undercouch.download" version "4.0.4"
  id "groovy"
}

repositories {
  mavenLocal()
  mavenCentral()
}

// Get rid of that [expletive deleted] warning about xml-apis 2.0.2/1.0.b2
configurations.all {
  resolutionStrategy {
    force 'xml-apis:xml-apis:1.4.01'
    force 'org.xmlresolver:xmlresolver:3.0.2'
  }
}

configurations {
  tools {
    description = "Run tools"
    transitive = true
  }
}

dependencies {
  tools (
    [group: 'org.relaxng', name: 'jing', version: '20181204'],
    [group: 'org.relaxng', name: 'trang', version: '20181204']
  )
}

defaultTasks 'allspecs'

apply plugin: 'org.docbook.task'
apply plugin: 'com.xmlcalabash.task'

import org.docbook.DocBookTask
import com.xmlcalabash.XMLCalabashTask
import de.undercouch.gradle.tasks.download.Download

// ======================================================================

task allspecs(dependsOn: [ "buildspecs" ]) {
}

task buildspecs() {
  // dependencies are added by the specs
}

def getenv(String name) {
  if (System.getenv(name) == null) {
    return ""
  } else {
    return System.getenv(name)
  }
}

def deltaxml() {
  def dxml = file("deltaxml")
  if (dxml.exists() && dxml.isDirectory()) {
    return "diff"
  } else {
    return ""
  }
}

// ======================================================================
// Specification schemas

task spec_schemas(dependsOn: [ "spec_rng", "spec_sch" ]) {
  // nop
}

task spec_rng(type: JavaExec) {
  inputs.files fileTree(dir: "schema/")
  outputs.file "build/schema/dbspec.rng"

  classpath = configurations.tools
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["schema/dbspec.rnc", "build/schema/dbspec.rng"]
  doFirst {
    mkdir("build/schema")
  }
}

task spec_sch(type: Copy) {
  from('schema') {
    include "docbook.sch"
  }
  into "build/schema"
  doFirst {
    mkdir("build/schema")
  }
}

// ======================================================================
// XProc schemas (just make sure they're downloaded early)

task download_core30_rng(type: Download) {
  src "$grammarBaseUri/lib/core30.rng"
  dest "$buildDir/"
  doFirst { mkdir "$buildDir" }
}
download_core30_rng.onlyIf { ! file("$buildDir/core30.rng".toString()).exists() }
spec_schemas.dependsOn download_core30_rng

def schemaList = ["xproc.rnc", "xproc.rng",
                  "xproc10.rnc", "xproc10.rng",
                  "xproc30.rnc", "xproc30.rng"]

schemaList.each { schema ->
  def taskname = "download_" + schema.replace(".", "_")
  Task t = task "${taskname}"(type: Download) {
    src "$grammarBaseUri/relax-ng/$schema"
    dest "$buildDir/"
    doFirst { mkdir "$buildDir" }
  }
  t.onlyIf { ! file("$buildDir/$schema".toString()).exists() }
  spec_schemas.dependsOn t
}

// This isn't *really* a schema, but it comes from the same repo
task download_library_xpl(type: Download) {
  src "$grammarBaseUri/xproc-3.0/library.xpl"
  dest "$buildDir/"
  doFirst { mkdir "$buildDir" }
}
download_library_xpl.onlyIf { ! file("$buildDir/library.xpl".toString()).exists() }
spec_schemas.dependsOn download_library_xpl


// ======================================================================
// ToC files for step specifications; again just make sure they're 
// downloaded early.

def stepList = [ "step-file", "step-os", "step-paged-media", "step-rdf",
                 "step-run", "step-text", "step-validation", "steps" ]
stepList.each { step ->
  def taskname = "download_" + step + "_toc"
  Task t = task "${taskname}"(type: Download) {
    src "$stepsBaseUri/$step/toc.xml"
    dest "$buildDir/$step/toc.xml"
    doFirst { mkdir "$buildDir" }
  }
  t.onlyIf { ! file("$buildDir/$step/toc.xml".toString()).exists() }
  spec_schemas.dependsOn t
}

// ======================================================================
// overview

task overview(dependsOn: [ "spec_schemas",
                           "overview:specification", "overview_assets",
                           "overview_src" ],
              type: DocBookTask) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  input("source", "overview/build/source.xml")
  output("result", "build/dist/overview/index.html")

  param("schemaext.schema", file("build/schema/dbspec.rng"))
  param("ci", getenv("CIWORKFLOW"))
  param("ci-commit", getenv("CI_SHA1"))
  param("ci-build-number", getenv("CI_BUILD_NUM"))
  param("ci-user", getenv("CI_PROJECT_USERNAME"))
  param("ci-repo", getenv("CI_PROJECT_REPONAME"))
  param("ci-branch", getenv("CI_BRANCH"))
  param("ci-tag", getenv("CI_TAG"))

  option("style", file("tools/xsl/xproc-specs.xsl"))
  option("diff", deltaxml())
  option("specid", "overview")
  //option("diffloc", "../../build/dist/overview/diff.html")

  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "overview"

task overview_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/overview/"
}

task overview_src(dependsOn: ["overview:source"], type: Copy) {
  from "overview/build/"
  into "build/dist/overview/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

// ================================================================================

def buildAbsDir = file("build/dist/xproc").getAbsolutePath()

task xproc(dependsOn: [ "spec_schemas",
                        "xproc:specification", "xproc_assets", "xproc_src" ],
             type: DocBookTask) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  input("source", "xproc/build/source.xml")
  output("result", "build/dist/xproc/index.html")

  param("schemaext.schema", file("build/schema/dbspec.rng"))
  param("ci", getenv("CIWORKFLOW"))
  param("ci-commit", getenv("CI_SHA1"))
  param("ci-build-number", getenv("CI_BUILD_NUM"))
  param("ci-user", getenv("CI_PROJECT_USERNAME"))
  param("ci-repo", getenv("CI_PROJECT_REPONAME"))
  param("ci-branch", getenv("CI_BRANCH"))
  param("ci-tag", getenv("CI_TAG"))

  option("style", file("tools/xsl/xproc-specs.xsl"))
  option("diff", deltaxml())
  option("specid", "xproc")
  option("diffloc", buildAbsDir + "/diff.html")
  option("lcdiffloc", buildAbsDir + "/lcdiff.html")

  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "xproc"
overview.dependsOn "xproc"

task xproc_pdf_xform(dependsOn: [ "xproc" ], type: XMLCalabashTask) {
  inputs.file "${projectDir}/tools/xsl/htmlprint.xsl"
  inputs.file "${buildDir}/dist/xproc/index.html"
  outputs.file "${buildDir}/dist/xproc/pdf.html"

  input("source", "${buildDir}/dist/xproc/index.html")
  output("result", "${buildDir}/dist/xproc/pdf.html")

  pipeline "tools/xpl/pdfspec.xpl"
}

task xproc_pdf(dependsOn: ["xproc_pdf_a4", "xproc_pdf_letter"]) {
  // nop
}

task xproc_pdf_a4(dependsOn: [ "xproc_pdf_xform", "xproc_web_assets"], type: Exec) {
  inputs.files fileTree(dir: "${projectDir}/tools/xsl/")
  inputs.file "${buildDir}/dist/xproc/pdf.html"
  inputs.files fileTree(dir: "${buildDir}/dist/xproc/css")
  inputs.files fileTree(dir: "${projectDir}/tools/xpl/")
  inputs.files fileTree(dir: "${projectDir}/xproc/src/")
  outputs.file "${buildDir}/dist/xproc/xproc_a4.pdf" 

  doFirst {
    copy {
      from("${projectDir}/src/main/resources/css") {
        include "print-a4.css"
      }
      into "${buildDir}/dist/xproc/css"
      rename ("print-a4.css", "print.css")
    }
  }

  commandLine "/usr/local/AHFormatterV72/bin/AHFCmd",
    "-f", "xhtml", "-d", "${buildDir}/dist/xproc/pdf.html",
    "-o", "${buildDir}/dist/xproc/xproc_a4.pdf"
}

task xproc_pdf_letter(dependsOn: [ "xproc_pdf_xform", "xproc_web_assets"], type: Exec) {
  inputs.files fileTree(dir: "${projectDir}/tools/xsl/")
  inputs.file "${buildDir}/dist/xproc/pdf.html"
  inputs.files fileTree(dir: "${buildDir}/dist/xproc/css")
  inputs.files fileTree(dir: "${projectDir}/tools/xpl/")
  inputs.files fileTree(dir: "${projectDir}/xproc/src/")
  outputs.file "${buildDir}/dist/xproc/xproc_letter.pdf" 

  doFirst {
    copy {
      from("${projectDir}/src/main/resources/css") {
        include "print-letter.css"
      }
      into "${buildDir}/dist/xproc/css"
      rename ("print-letter.css", "print.css")
    }
  }

  commandLine "/usr/local/AHFormatterV72/bin/AHFCmd",
    "-f", "xhtml", "-d", "${buildDir}/dist/xproc/pdf.html",
    "-o", "${buildDir}/dist/xproc/xproc_letter.pdf"
}

task xproc_assets(dependsOn: [ "xproc:images", "xproc_web_assets", "xproc_schemas",
                               "spec_schemas" ]) {
  doLast {
    copy {
      from "xproc/build/graphics"
      into "build/dist/xproc/graphics/"
    }
  }

  doLast {
    copy {
      into "build/dist/xproc"
      from ("${buildDir}") {
        include "library.xpl"
        include "xproc.rn*"
        include "xproc10.rn*"
        include "xproc30.rn*"
      }
    }
  }
}

task xproc_web_assets(type: Copy) {
  from ("${projectDir}/src/main/resources") {
    exclude "css/print-a4.css"
    exclude "css/print-letter.css"
  }
  into "build/dist/xproc/"
}

task xproc_schemas(dependsOn: [ "spec_schemas" ], type: Copy) {
  from "build/"
  into "build/dist/xproc/schemas/"
  include "xp*.rn*"
}

task xproc_src(dependsOn: ["xproc:source"], type: Copy) {
  from "xproc/build/"
  into "build/dist/xproc/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

// ======================================================================
// Clean up

clean {
  doFirst {
    delete("build")
  }
}

